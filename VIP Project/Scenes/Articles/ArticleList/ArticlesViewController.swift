//
//  ArticlesViewController.swift
//  VIP Project
//
//  Created by Victor on 21/08/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Kingfisher

protocol ArticlesViewControllerProtocol: UIViewControllerRouting {
    func setupDI(
        interactor: ArticlesInteractorProtocol,
        router: ArticlesRouterProtocol
    )
    
    func displayArticles(viewModel: Articles.List.ViewModel)
    func displayArticles(viewModel: Articles.Search.ViewModel)
}

class ArticlesViewController: UIViewController, UITableViewDelegate, UITableViewDataSource, UISearchBarDelegate, ArticlesViewControllerProtocol {
    
    @IBOutlet weak var searchBar: UISearchBar!
    @IBOutlet weak var tableView: UITableView!
    
    var interactor: ArticlesInteractorProtocol?
    var router: ArticlesRouterProtocol?
    
    var articles: [Article]?
    
    //MARK: - DI
    
    func setupDI(
        interactor: ArticlesInteractorProtocol,
        router: ArticlesRouterProtocol
    ) {
        self.interactor = interactor
        self.router = router
    }
    
    //MARK: - View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        prepareUI()
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        self.searchBar.searchTextField.resignFirstResponder()
    }
    
    //MARK: - Prepare UI
    
    func prepareUI() {
        view.backgroundColor = Colors.myLightGray
        searchBar.barTintColor = Colors.myLightGray
        tableView.backgroundColor = Colors.myLightGray
        
        tableView.register(ArticleTableViewCell.nib(), forCellReuseIdentifier: ArticleTableViewCell.identifier)
        
        searchBar.delegate = self
        tableView.delegate = self
        tableView.dataSource = self
        
        tableView.tableFooterView = UIView()
        tableView.separatorColor = .clear
        
        searchBar.searchBarStyle = .minimal
    
        loadArticles()
    }
    
    //MARK: - Requests
    
    func loadArticles() {
        interactor?.getArticles()
    }
    
    func searchArticle(request: Articles.Search.Request) {
        interactor?.searchArticle(request: request)
    }
    
    //MARK: - Displays
    
    func displayArticles(viewModel: Articles.List.ViewModel) {
        self.articles = viewModel.articles
        tableView.reloadData()
    }
    
    func displayArticles(viewModel: Articles.Search.ViewModel) {
        self.articles = viewModel.articles
        tableView.reloadData()
    }
    
    //MARK: - Search
    
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        searchArticle(request: Articles.Search.Request(text: searchText))
    }
    
    //MARK: - Table View
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return articles?.count ?? 0
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableView.dequeueReusableCell(withIdentifier: ArticleTableViewCell.identifier) as? ArticleTableViewCell,
              let title = articles?[indexPath.row].title,
              let url = URL(string: articles?[indexPath.row].urlToImage ?? "") else { fatalError("Couldn't dequeue cell")}
        
        let processor = DownsamplingImageProcessor(size: cell.iconImageView.bounds.size)
        
        cell.configure(url: url, processor: processor, title: title)
        
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
        guard let article = articles?[indexPath.row] else { return }
        
        router?.route(to: .details(article))
    }
}
