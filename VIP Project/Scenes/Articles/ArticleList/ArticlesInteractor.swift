//
//  ArticlesInteractor.swift
//  VIP Project
//
//  Created by Victor on 21/08/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Combine

protocol ArticlesInteractorProtocol {
    func getArticles()
    func searchArticle(request: Articles.Search.Request)
    
    var selectedArticle: Article! { get set }
}

class ArticlesInteractor: ArticlesInteractorProtocol {
    
    var presenter: ArticlesPresenterProtocol
    let service: ArticleServiceProtocol
    
    var articles: [Article]?
    var filteredArticles: [Article]?
    var selectedArticle: Article!
    
    var cancellables = Set<AnyCancellable>()
    
    //MARK: - DI
    
    init(
        presenter: ArticlesPresenterProtocol,
        service: ArticleServiceProtocol
    ) {
        self.presenter = presenter
        self.service = service
    }
    
    //MARK: - Responses
    
    func getArticles() {
        service.articles()
            .sink { completion in
                switch completion {
                    case .finished:
                        print("Success")
                    case .failure:
                        print("Failure")
                }
            } receiveValue: { [weak self] response in
                self?.articles = response[0].articles
                let response = Articles.List.Response(articles: self?.articles, error: nil)
                self?.presenter.presentArticles(response: response)
            }
    }
    
    func searchArticle(request: Articles.Search.Request) {
        if request.text == "" {
            filteredArticles = articles
        } else {
            filteredArticles = articles?.filter({ (article) -> Bool in
                return (article.title?.lowercased().contains((request.text?.lowercased())!))!
            })
        }
        
        presenter.presentFilteredArticles(response: Articles.Search.Response(articles: filteredArticles))
    }
}
